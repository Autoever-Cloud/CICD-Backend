# 워크플로우의 이름
name: Deploy to Amazon EC2 with Docker Hub
# 워크플로우가 실행될 조건
on:
  push:
    branches:
      - main
# 환경 변수 설정
env:
  DOCKERHUB_REPO: solog-backend # Docker Hub 리포지토리 이름
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      # 1. GitHub 리포지토리 코드 가져오기
      - name: Checkout
        uses: actions/checkout@v3
      # 2. JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21' 
          distribution: 'temurin'
      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      # 4. Gradle로 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test
      # 5. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # 6. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image to Docker Hub
        env:
          IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO }}
        run: |
          docker build -t $IMAGE_NAME:${{ github.sha }} .
          docker push $IMAGE_NAME:${{ github.sha }}
      # 7. EC2에 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO }}:${{ github.sha }}
            if [ $(docker ps -q --filter "name=solog-backend") ]; then
              docker stop solog-backend
              docker rm solog-backend
            fi
            docker run -d --name solog-backend -p 8080:8080 \
              -e GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
              -e GEMINI_API_URL='${{ secrets.GEMINI_API_URL }}' \
              -e GRAFANA_URL=${{ secrets.GRAFANA_URL }} \
              -e GRAFANA_TOKEN=${{ secrets.GRAFANA_TOKEN }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO }}:${{ github.sha }}